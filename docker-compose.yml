services:
  postgres:
    image: postgres:16.3
    restart: always
    environment:
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-misp}
    healthcheck:
      test: "pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB"
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data

  opensearch:
    image: opensearchproject/opensearch:1.3.16
    container_name: opensearch-misp1
    environment:
      OPENSEARCH_HOSTNAME: ${OPENSEARCH_HOSTNAME:-opensearch}
      OPENSEARCH_PORT: ${OPENSEARCH_PORT:-9200}
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: ${OPENSEARCH_INITIAL_ADMIN_PASSWORD}
      cluster.name: opensearch-cluster
      node.name: opensearch-misp1
      discovery.type: single-node
      bootstrap.memory_lock: true
      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
      plugins.security.disabled: true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - opensearch-data:/usr/share/opensearch/data

  dashboards:
    image: opensearchproject/opensearch-dashboards:1.3.16
    container_name: opensearch-dashboards
    environment:
      OPENSEARCH_HOSTNAME: ${OPENSEARCH_HOSTNAME:-opensearch}
      OPENSEARCH_PORT: ${OPENSEARCH_PORT:-9200}
      OPENSEARCH_HOSTS: "http://${OPENSEARCH_HOSTNAME}:${OPENSEARCH_PORT}"
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: true
    ports:
      - "5601:5601"
    depends_on:
      - opensearch

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    environment:
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-misp}
      OPENSEARCH_HOSTNAME: ${OPENSEARCH_HOSTNAME:-opensearch}
      OPENSEARCH_PORT: ${OPENSEARCH_PORT:-9200}
      OAUTH2_SECRET_KEY: ${OAUTH2_SECRET_KEY}
      OAUTH2_ALGORITHM: ${OAUTH2_ALGORITHM:-HS256}
      OAUTH2_ACCESS_TOKEN_EXPIRE_MINUTES: ${OAUTH2_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      CELERY_BROKER_URL: amqp://${RABBITMQ_DEFAULT_USER:-rabbitmq}:${RABBITMQ_DEFAULT_PASS:-rabbitmq}@${RABBITMQ_HOSTNAME:-rabbitmq}:5672/${RABBITMQ_DEFAULT_VHOST:-rabbitmq}
      CELERY_RESULT_BACKEND: redis://${REDIS_HOSTNAME:-redis}:${REDIS_PORT:-6379}/${REDIS_CELERY_DB:-0}
      BROKER_POOL_LIMIT: None
      BROKER_TRANSPORT_OPTIONS: "{'confirm_publish': True}"
      BROKER_CONNECTION_TIMEOUT: 30
      BROKER_CONNECTION_RETRY: True
      BROKER_CONNECTION_MAX_RETRIES: 100
      CELERY_TASK_TRACK_STARTED:  True
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_SERVER: ${MAIL_SERVER}
      MODULES_HOST: ${MODULES_HOST:-modules}
      MODULES_PORT: ${MODULES_PORT:-6666}
    entrypoint: [ "bash", "-c", "./entrypoint.sh" ]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      API_HOST: api
    depends_on:
      - api

  worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    command: poetry run celery -A app.worker.tasks worker --loglevel=info --hostname worker@%h
    environment:
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-misp}
      OPENSEARCH_HOSTNAME: ${OPENSEARCH_HOSTNAME:-opensearch}
      OPENSEARCH_PORT: ${OPENSEARCH_PORT:-9200}
      OAUTH2_SECRET_KEY: ${OAUTH2_SECRET_KEY}
      OAUTH2_ALGORITHM: ${OAUTH2_ALGORITHM:-HS256}
      OAUTH2_ACCESS_TOKEN_EXPIRE_MINUTES: ${OAUTH2_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      CELERY_BROKER_URL: amqp://${RABBITMQ_DEFAULT_USER:-rabbitmq}:${RABBITMQ_DEFAULT_PASS:-rabbitmq}@${RABBITMQ_HOSTNAME:-rabbitmq}:5672/${RABBITMQ_DEFAULT_VHOST:-rabbitmq}
      CELERY_RESULT_BACKEND: redis://${REDIS_HOSTNAME:-redis}:${REDIS_PORT:-6379}/${REDIS_CELERY_DB:-0}
      BROKER_HEARTBEAT: 0
      BROKER_POOL_LIMIT: None
      BROKER_TRANSPORT_OPTIONS: "{'confirm_publish': True}"
      BROKER_CONNECTION_TIMEOUT: 30
      BROKER_CONNECTION_RETRY: True
      BROKER_CONNECTION_MAX_RETRIES: 100
      CELERY_TASK_TRACK_STARTED:  True
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_SERVER: ${MAIL_SERVER}
      MODULES_HOST: ${MODULES_HOST:-modules}
      MODULES_PORT: ${MODULES_PORT:-6666}
    depends_on:
      - redis
      - postgres
      - rabbitmq
      - api

  flower:
    build:
      context: ./api
      dockerfile: Dockerfile
    command: poetry run celery -A app.worker.tasks flower --loglevel=info --persistent=True --auto_refresh=True --state_save_interval=5
    ports:
      - "5555:5555"
    working_dir: /code
    environment:
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-misp}
      OPENSEARCH_HOSTNAME: ${OPENSEARCH_HOSTNAME:-opensearch}
      OPENSEARCH_PORT: ${OPENSEARCH_PORT:-9200}
      OAUTH2_SECRET_KEY: ${OAUTH2_SECRET_KEY}
      OAUTH2_ALGORITHM: ${OAUTH2_ALGORITHM:-HS256}
      OAUTH2_ACCESS_TOKEN_EXPIRE_MINUTES: ${OAUTH2_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      CELERY_BROKER_URL: amqp://${RABBITMQ_DEFAULT_USER:-rabbitmq}:${RABBITMQ_DEFAULT_PASS:-rabbitmq}@${RABBITMQ_HOSTNAME:-rabbitmq}:5672/${RABBITMQ_DEFAULT_VHOST:-rabbitmq}
      CELERY_RESULT_BACKEND: redis://${REDIS_HOSTNAME:-redis}:${REDIS_PORT:-6379}/${REDIS_CELERY_DB:-0}
      BROKER_HEARTBEAT: 0
      BROKER_POOL_LIMIT: None
      BROKER_TRANSPORT_OPTIONS: "{'confirm_publish': True}"
      BROKER_CONNECTION_TIMEOUT: 30
      BROKER_CONNECTION_RETRY: True
      BROKER_CONNECTION_MAX_RETRIES: 100
      CELERY_TASK_TRACK_STARTED:  True
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_SERVER: ${MAIL_SERVER}
      MODULES_HOST: ${MODULES_HOST:-modules}
      MODULES_PORT: ${MODULES_PORT:-6666}
    depends_on:
      - worker
      - rabbitmq
      - redis

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_HOSTNAME: ${RABBITMQ_HOSTNAME:-rabbitmq}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_HOSTNAME:-rabbitmq}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-rabbitmq}
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    depends_on:
      - redis
  
  modules:
    image: ghcr.io/misp/misp-docker/misp-modules:latest
    environment:
      - "REDIS_BACKEND=redis"
    depends_on:
      redis:
        condition: service_healthy

volumes:
  opensearch-data:
  postgres-data:
